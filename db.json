{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1667602741051},{"_id":"source/_posts/001-start.md","hash":"b54f5f7b4b085aae7d6aaabc156f19cf578b4989","modified":1667606974435},{"_id":"source/_posts/002-seam.md","hash":"6bd28cdbc2cb05b87ed346223fa1cd10ab3c43e4","modified":1667605090340},{"_id":"source/_posts/.DS_Store","hash":"cab0bd819d29186112249428a2a1a585271c7813","modified":1667602741049},{"_id":"source/categories/index.md","hash":"58ebf937b351ec854a6729a3cf9175e5d96d96e8","modified":1667605421828},{"_id":"source/_posts/003-web-scraping.md","hash":"48ceb5753ab874230bf53bd0b7a23d1e34a58179","modified":1667605037879},{"_id":"source/_posts/002-seam/.DS_Store","hash":"e23dab22415aa0f1350948893df357044a6641a3","modified":1667602746152},{"_id":"source/tags/index.md","hash":"b8ad4defeba48c6d40e85db703d832b72165d82e","modified":1667605344622},{"_id":"source/_posts/002-seam/set1_carved8.jpg","hash":"a0de1fc1f6b7db8ea7a4d8a8c968a3c67917555b","modified":1620520922000},{"_id":"source/_posts/002-seam/set1_carved6.jpg","hash":"3a9b5fd338f205b11e41fd08096852015df0c558","modified":1620520922000},{"_id":"source/_posts/002-seam/set1_original.jpg","hash":"b1a5152088168dfd1b664cf15cfb03baf16c1743","modified":1620520922000},{"_id":"source/_posts/002-seam/set4_carved3.jpg","hash":"d163d717d57ce4c1b26e2f5613da8769b3535240","modified":1620520922000},{"_id":"source/_posts/002-seam/set4_carved7.jpg","hash":"8d3641ad37b93469527351d753e60e24061a92eb","modified":1620520922000},{"_id":"source/_posts/002-seam/set4_original.jpg","hash":"cf63f06601f8dae0f65b2021a5dae355342df38e","modified":1620520922000},{"_id":"node_modules/hexo-theme-next/.DS_Store","hash":"6a3b9063f1bfc436e9d2f499cf3735815cdc9f1f","modified":1667602521197},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1667602521197},{"_id":"node_modules/hexo-theme-next/README.md","hash":"56638e4978154a2f2a3f03ba84047b77b4a499cc","modified":1667602521197},{"_id":"node_modules/hexo-theme-next/package.json","hash":"984b9d8ed7eea3d847b5a224bbe5e913ac08fd26","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"469e2711d3f1f5b97692cc19071db3eb0de3c036","modified":1667602521198},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"b5ff75b23072a3728b2850c0e8bafbf4f7528342","modified":1667602521198},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1667602521198},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1667602521198},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1667602521198},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1667602521198},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"fccbf2855392186e11daa8590121073594037b7b","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"819c19eb9d142e5411f77cf3821d90f740ee114a","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1667602521199},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"6c82bfd2ec8248c248da701f091b548a7a133580","modified":1667602521198},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1667602521198},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1667602521198},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"ccf27b9249524b9fec1c15497b4353c8d1748c6c","modified":1667602521198},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"434b3e76a040a816169e1929657e4176e7b8164c","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"263eddabfae40e54c0591e7baa8403ade8cdd56d","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1667602521218},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"f160e39943e39d7276da86adb47c3f08e5f22c7a","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"30e03a1d4828259f82d46e64cbfe2955b6cff9a9","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1667602521207},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1667602521200},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1667602521201},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"314805f0186e9f6208c845f0757fdb7891c540f6","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1667602521202},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1667602521203},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1667602521204},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"ea7b1818b282196c92e4fbb131c6249b46ca33d2","modified":1667602521215},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1667602521205},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"62faf6b0b0020066a0dec1f0123cf1fee3198e7e","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1667602521206},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1667602521213},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1667602521213},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1667602521213},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1667602521213},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1667602521213},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1667602521213},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":1667602521213},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1667602521213},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1667602521214},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"33a82207a15aad9d1c8fb2251f9e3eba50452932","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1667602521216},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1667602521218},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1667602521218},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1667602521217},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1667602521218},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1667602521218},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1667602521208},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"c81cb8793b207ac935244e1436d4d38efd1ac15b","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1667602521209},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1667602521212},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"ff642130354a0b3be0d708c43044ed4d710b5e83","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1667602521210},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1667602521211},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1667602521211},{"_id":"source/_posts/002-seam/seam-carving-demonstration-video.gif","hash":"34b01e4c3ea4edf8c62d9a5fd7b09caeb9d40ee9","modified":1620520922000}],"Category":[{"name":"miscellaneous","_id":"cla36n5vg00058kvg42ph2b87"},{"name":"algorithms","_id":"cla36n5vh00078kvg65sn6tei"}],"Data":[],"Page":[{"title":"categories","date":"2022-11-04T23:33:41.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-11-04 19:33:41\ntype: categories\n---\n","updated":"2022-11-04T23:43:41.828Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cla36n5vc00008kvgbkcpebz1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-11-04T23:38:39.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-11-04 19:38:39\ntype: tags\n---\n","updated":"2022-11-04T23:42:24.622Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cla36n5ve00028kvg04pwchis","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"About This Blog","date":"2022-11-04T22:58:21.000Z","_content":"\n今天是2022年11月4日。\n\n\n","source":"_posts/001-start.md","raw":"---\ntitle: About This Blog\ndate: 2022-11-04 18:58:21\ncategories:\n - [miscellaneous]\n---\n\n今天是2022年11月4日。\n\n\n","slug":"001-start","published":1,"updated":"2022-11-05T00:09:34.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla36n5vd00018kvgdwhtf2g2","content":"<p>今天是2022年11月4日。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天是2022年11月4日。</p>\n"},{"title":"Content-Aware Image Resizing","date":"2022-11-04T22:58:31.000Z","mathjax":true,"_content":"\n# Seam Carving And Insertion\nfinal project for $computational$ $photography$ \n\n## Aim\nIn this project, I implemented methods to do vertical carving, horizontal carving, vertical insertion, and horizontal insertion in MATLAB. Before deleting or inserting seams, a mask can be manually defined on the input image that specifies an area in the image that is prone to artifacts and thus should be protected from changes.\n\n<!-- more -->\n\n## Seam Deletion \nHorizontal Carving (removing vertical seams): The function find_seam_vertical uses dynamic programing to retrieve a optimum seam that starts at the top of an image and ends at the bottom. The function keeps two records, one is for the minimum energy at each pixel, the other for the direction of each step. The energy function used in this project is entropy. Using these two records, a matrix same size as the image with 0 indicate not a pixel from the seam and 1 indicating a pixel from the seam can be constructed. The function delete_seam_vertical_mask loops over the image a specified amount of times to remove multiple seams. Vertical Carving (removing horizontal seams) is achieved similarly. \n\n## Seam Insertion\nHorizontal Insertion (adding vertical seams): The function seam_vertical_record_mask uses the methods to find seams from seam deletion to keep a record of multiple seams that would be removed if a seam deletion is performed. The record is of the index of pixels in the original image that the seams are removing (so if a 5th seam is found, it would not keep track of the new index of the seam from the shrinked image after removing the previous 4 seams, but rather keeping track of positions in the original image). Using the seam indexes, the function seam_vertical_record_mask will duplicate seams that would be deleted in the performed order. Because inserting seams also changes the index of pixels in the original image, a matrix of original pixel index is stored, and the seam inserted is always on the index of the original image pixels. Thus, in the animation of the seam insertion, there will be times that the red line indicating seams became disconnected. This is because previous seams inserted have changed pixel positions in the image, and in order to insert corresponding seams, their pixel positions need to be adjusted too. The duplicated seam is the average of the three pixels surrounding it in the horizontal direction. Vertical Insertion (adding horizontal seams) is achieved similarly. \n\n## Some Challenges\nWhile implementing seam deletions, the most challenging aspect is to correctly set up dynamic program to find the seam. Because seam pixels need to be connected to previous pixels (can only be off by 1 pixel), when dynamically going through all pixels in an image, the range that the next step pixel can take is restricted to between +1 and -1 of the current pixel position. It also took some tries to figure out that using entropy as the energy function is relatively stable and easy to implement. Other functions that detect edges that I tried did not work as well in seam carving. \nIn my opinion, seam insertion is more challenging than seam carving. The intuitive solution is to find a seam, duplicate it, then find a new seam in the stretched image, and again duplicated it. This repeated seam insertion process, however, would not work because it would just be the same seam being duplicated again and again. Therefore, there is the need find at once set of all seams that would be removed if performing a seam deletion, then reverse-engineering these seams and duplicate each of them. It is also challenging to figure out how to correctly duplicate seams at correct pixels. The seams, if finding them the seam way as in seam deletion, would not work, because the image sizes have changed. Therefore, it is necessary to keep track of seams in the pixel index or positions in the original image’s perspective. And when inserting the duplicated seams, it is necessary again to use the original image’s indexes. \n\nThe other challenging part of the project is to find out a way to minimize artifacts, especially on images where there is a specific object to keep intact. The solution I came up with is to use the getMask function that we have used in multiple other assignments. Using a user-specified black and white mask of the image, it is possible to increase energy on the masked regions when finding seams. Thus, the seam-finding algorithm will seek to avoid these regions.\n\n## Seam Carving and Insertion Processes\n\n[Code and more](https://github.com/iasnobmatsu/SeamCarvingAndInsertion)\n\n## Examples\n\noriginal image\n\n{% asset_img set4_original.jpg %}\n\n\nremoving 90 pixels horizontally\n\n{% asset_img set4_carved3.jpg %}\n\ninseting 30 pixels horizontally\n\n{% asset_img set4_carved7.jpg %}\n\n[original image](https://jojo.fandom.com/wiki/Hirohiko_Araki_JoJo_Exhibition_2012?file=Exhib8.jpg)\n\n{% asset_img set1_original.jpg %}\n\nremoving 90 pixels vertically \n\n{% asset_img set1_carved6.jpg %}\n\ninseting 30 pixels vertically\n\n{% asset_img set1_carved8.jpg %}\n\n\n","source":"_posts/002-seam.md","raw":"---\ntitle: Content-Aware Image Resizing\ndate: 2022-11-04 18:58:31\nmathjax: true\ncategories: \n - [algorithms]\ntags: [computational photography, matlab]\n---\n\n# Seam Carving And Insertion\nfinal project for $computational$ $photography$ \n\n## Aim\nIn this project, I implemented methods to do vertical carving, horizontal carving, vertical insertion, and horizontal insertion in MATLAB. Before deleting or inserting seams, a mask can be manually defined on the input image that specifies an area in the image that is prone to artifacts and thus should be protected from changes.\n\n<!-- more -->\n\n## Seam Deletion \nHorizontal Carving (removing vertical seams): The function find_seam_vertical uses dynamic programing to retrieve a optimum seam that starts at the top of an image and ends at the bottom. The function keeps two records, one is for the minimum energy at each pixel, the other for the direction of each step. The energy function used in this project is entropy. Using these two records, a matrix same size as the image with 0 indicate not a pixel from the seam and 1 indicating a pixel from the seam can be constructed. The function delete_seam_vertical_mask loops over the image a specified amount of times to remove multiple seams. Vertical Carving (removing horizontal seams) is achieved similarly. \n\n## Seam Insertion\nHorizontal Insertion (adding vertical seams): The function seam_vertical_record_mask uses the methods to find seams from seam deletion to keep a record of multiple seams that would be removed if a seam deletion is performed. The record is of the index of pixels in the original image that the seams are removing (so if a 5th seam is found, it would not keep track of the new index of the seam from the shrinked image after removing the previous 4 seams, but rather keeping track of positions in the original image). Using the seam indexes, the function seam_vertical_record_mask will duplicate seams that would be deleted in the performed order. Because inserting seams also changes the index of pixels in the original image, a matrix of original pixel index is stored, and the seam inserted is always on the index of the original image pixels. Thus, in the animation of the seam insertion, there will be times that the red line indicating seams became disconnected. This is because previous seams inserted have changed pixel positions in the image, and in order to insert corresponding seams, their pixel positions need to be adjusted too. The duplicated seam is the average of the three pixels surrounding it in the horizontal direction. Vertical Insertion (adding horizontal seams) is achieved similarly. \n\n## Some Challenges\nWhile implementing seam deletions, the most challenging aspect is to correctly set up dynamic program to find the seam. Because seam pixels need to be connected to previous pixels (can only be off by 1 pixel), when dynamically going through all pixels in an image, the range that the next step pixel can take is restricted to between +1 and -1 of the current pixel position. It also took some tries to figure out that using entropy as the energy function is relatively stable and easy to implement. Other functions that detect edges that I tried did not work as well in seam carving. \nIn my opinion, seam insertion is more challenging than seam carving. The intuitive solution is to find a seam, duplicate it, then find a new seam in the stretched image, and again duplicated it. This repeated seam insertion process, however, would not work because it would just be the same seam being duplicated again and again. Therefore, there is the need find at once set of all seams that would be removed if performing a seam deletion, then reverse-engineering these seams and duplicate each of them. It is also challenging to figure out how to correctly duplicate seams at correct pixels. The seams, if finding them the seam way as in seam deletion, would not work, because the image sizes have changed. Therefore, it is necessary to keep track of seams in the pixel index or positions in the original image’s perspective. And when inserting the duplicated seams, it is necessary again to use the original image’s indexes. \n\nThe other challenging part of the project is to find out a way to minimize artifacts, especially on images where there is a specific object to keep intact. The solution I came up with is to use the getMask function that we have used in multiple other assignments. Using a user-specified black and white mask of the image, it is possible to increase energy on the masked regions when finding seams. Thus, the seam-finding algorithm will seek to avoid these regions.\n\n## Seam Carving and Insertion Processes\n\n[Code and more](https://github.com/iasnobmatsu/SeamCarvingAndInsertion)\n\n## Examples\n\noriginal image\n\n{% asset_img set4_original.jpg %}\n\n\nremoving 90 pixels horizontally\n\n{% asset_img set4_carved3.jpg %}\n\ninseting 30 pixels horizontally\n\n{% asset_img set4_carved7.jpg %}\n\n[original image](https://jojo.fandom.com/wiki/Hirohiko_Araki_JoJo_Exhibition_2012?file=Exhib8.jpg)\n\n{% asset_img set1_original.jpg %}\n\nremoving 90 pixels vertically \n\n{% asset_img set1_carved6.jpg %}\n\ninseting 30 pixels vertically\n\n{% asset_img set1_carved8.jpg %}\n\n\n","slug":"002-seam","published":1,"updated":"2022-11-04T23:38:10.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla36n5vf00038kvgbwyt6afw","content":"<h1 id=\"Seam-Carving-And-Insertion\"><a href=\"#Seam-Carving-And-Insertion\" class=\"headerlink\" title=\"Seam Carving And Insertion\"></a>Seam Carving And Insertion</h1><p>final project for <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.432ex\" height=\"2.009ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 6379 888\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(433,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(918,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1796,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2299,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2871,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3232,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3761,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4122,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4467,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4952,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5552,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6081,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g></g></g></svg></mjx-container> <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.299ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 5436 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(503,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1079,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1564,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1925,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2410,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2887,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3338,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3867,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4370,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4946,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> </p>\n<h2 id=\"Aim\"><a href=\"#Aim\" class=\"headerlink\" title=\"Aim\"></a>Aim</h2><p>In this project, I implemented methods to do vertical carving, horizontal carving, vertical insertion, and horizontal insertion in MATLAB. Before deleting or inserting seams, a mask can be manually defined on the input image that specifies an area in the image that is prone to artifacts and thus should be protected from changes.</p>\n<span id=\"more\"></span>\n<h2 id=\"Seam-Deletion\"><a href=\"#Seam-Deletion\" class=\"headerlink\" title=\"Seam Deletion\"></a>Seam Deletion</h2><p>Horizontal Carving (removing vertical seams): The function find_seam_vertical uses dynamic programing to retrieve a optimum seam that starts at the top of an image and ends at the bottom. The function keeps two records, one is for the minimum energy at each pixel, the other for the direction of each step. The energy function used in this project is entropy. Using these two records, a matrix same size as the image with 0 indicate not a pixel from the seam and 1 indicating a pixel from the seam can be constructed. The function delete_seam_vertical_mask loops over the image a specified amount of times to remove multiple seams. Vertical Carving (removing horizontal seams) is achieved similarly. </p>\n<h2 id=\"Seam-Insertion\"><a href=\"#Seam-Insertion\" class=\"headerlink\" title=\"Seam Insertion\"></a>Seam Insertion</h2><p>Horizontal Insertion (adding vertical seams): The function seam_vertical_record_mask uses the methods to find seams from seam deletion to keep a record of multiple seams that would be removed if a seam deletion is performed. The record is of the index of pixels in the original image that the seams are removing (so if a 5th seam is found, it would not keep track of the new index of the seam from the shrinked image after removing the previous 4 seams, but rather keeping track of positions in the original image). Using the seam indexes, the function seam_vertical_record_mask will duplicate seams that would be deleted in the performed order. Because inserting seams also changes the index of pixels in the original image, a matrix of original pixel index is stored, and the seam inserted is always on the index of the original image pixels. Thus, in the animation of the seam insertion, there will be times that the red line indicating seams became disconnected. This is because previous seams inserted have changed pixel positions in the image, and in order to insert corresponding seams, their pixel positions need to be adjusted too. The duplicated seam is the average of the three pixels surrounding it in the horizontal direction. Vertical Insertion (adding horizontal seams) is achieved similarly. </p>\n<h2 id=\"Some-Challenges\"><a href=\"#Some-Challenges\" class=\"headerlink\" title=\"Some Challenges\"></a>Some Challenges</h2><p>While implementing seam deletions, the most challenging aspect is to correctly set up dynamic program to find the seam. Because seam pixels need to be connected to previous pixels (can only be off by 1 pixel), when dynamically going through all pixels in an image, the range that the next step pixel can take is restricted to between +1 and -1 of the current pixel position. It also took some tries to figure out that using entropy as the energy function is relatively stable and easy to implement. Other functions that detect edges that I tried did not work as well in seam carving.<br>In my opinion, seam insertion is more challenging than seam carving. The intuitive solution is to find a seam, duplicate it, then find a new seam in the stretched image, and again duplicated it. This repeated seam insertion process, however, would not work because it would just be the same seam being duplicated again and again. Therefore, there is the need find at once set of all seams that would be removed if performing a seam deletion, then reverse-engineering these seams and duplicate each of them. It is also challenging to figure out how to correctly duplicate seams at correct pixels. The seams, if finding them the seam way as in seam deletion, would not work, because the image sizes have changed. Therefore, it is necessary to keep track of seams in the pixel index or positions in the original image’s perspective. And when inserting the duplicated seams, it is necessary again to use the original image’s indexes. </p>\n<p>The other challenging part of the project is to find out a way to minimize artifacts, especially on images where there is a specific object to keep intact. The solution I came up with is to use the getMask function that we have used in multiple other assignments. Using a user-specified black and white mask of the image, it is possible to increase energy on the masked regions when finding seams. Thus, the seam-finding algorithm will seek to avoid these regions.</p>\n<h2 id=\"Seam-Carving-and-Insertion-Processes\"><a href=\"#Seam-Carving-and-Insertion-Processes\" class=\"headerlink\" title=\"Seam Carving and Insertion Processes\"></a>Seam Carving and Insertion Processes</h2><p><a href=\"https://github.com/iasnobmatsu/SeamCarvingAndInsertion\">Code and more</a></p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>original image</p>\n<img src=\"/2022/11/04/002-seam/set4_original.jpg\" class=\"\">\n<p>removing 90 pixels horizontally</p>\n<img src=\"/2022/11/04/002-seam/set4_carved3.jpg\" class=\"\">\n<p>inseting 30 pixels horizontally</p>\n<img src=\"/2022/11/04/002-seam/set4_carved7.jpg\" class=\"\">\n<p><a href=\"https://jojo.fandom.com/wiki/Hirohiko_Araki_JoJo_Exhibition_2012?file=Exhib8.jpg\">original image</a></p>\n<img src=\"/2022/11/04/002-seam/set1_original.jpg\" class=\"\">\n<p>removing 90 pixels vertically </p>\n<img src=\"/2022/11/04/002-seam/set1_carved6.jpg\" class=\"\">\n<p>inseting 30 pixels vertically</p>\n<img src=\"/2022/11/04/002-seam/set1_carved8.jpg\" class=\"\">\n","site":{"data":{}},"excerpt":"<h1 id=\"Seam-Carving-And-Insertion\"><a href=\"#Seam-Carving-And-Insertion\" class=\"headerlink\" title=\"Seam Carving And Insertion\"></a>Seam Carving And Insertion</h1><p>final project for <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.439ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"14.432ex\" height=\"2.009ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 6379 888\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D450\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(433,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(918,0)\"><path data-c=\"1D45A\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1796,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2299,0)\"><path data-c=\"1D462\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2871,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3232,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3761,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4122,0)\"><path data-c=\"1D456\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4467,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4952,0)\"><path data-c=\"1D45B\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(5552,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(6081,0)\"><path data-c=\"1D459\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"></path></g></g></g></svg></mjx-container> <mjx-container class=\"MathJax\" jax=\"SVG\"><svg style=\"vertical-align: -0.464ex;\" xmlns=\"http://www.w3.org/2000/svg\" width=\"12.299ex\" height=\"2.034ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -694 5436 899\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mi\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(503,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1079,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1564,0)\"><path data-c=\"1D461\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(1925,0)\"><path data-c=\"1D45C\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2410,0)\"><path data-c=\"1D454\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(2887,0)\"><path data-c=\"1D45F\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3338,0)\"><path data-c=\"1D44E\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(3867,0)\"><path data-c=\"1D45D\" d=\"M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4370,0)\"><path data-c=\"210E\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g data-mml-node=\"mi\" transform=\"translate(4946,0)\"><path data-c=\"1D466\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g></g></g></svg></mjx-container> </p>\n<h2 id=\"Aim\"><a href=\"#Aim\" class=\"headerlink\" title=\"Aim\"></a>Aim</h2><p>In this project, I implemented methods to do vertical carving, horizontal carving, vertical insertion, and horizontal insertion in MATLAB. Before deleting or inserting seams, a mask can be manually defined on the input image that specifies an area in the image that is prone to artifacts and thus should be protected from changes.</p>","more":"<h2 id=\"Seam-Deletion\"><a href=\"#Seam-Deletion\" class=\"headerlink\" title=\"Seam Deletion\"></a>Seam Deletion</h2><p>Horizontal Carving (removing vertical seams): The function find_seam_vertical uses dynamic programing to retrieve a optimum seam that starts at the top of an image and ends at the bottom. The function keeps two records, one is for the minimum energy at each pixel, the other for the direction of each step. The energy function used in this project is entropy. Using these two records, a matrix same size as the image with 0 indicate not a pixel from the seam and 1 indicating a pixel from the seam can be constructed. The function delete_seam_vertical_mask loops over the image a specified amount of times to remove multiple seams. Vertical Carving (removing horizontal seams) is achieved similarly. </p>\n<h2 id=\"Seam-Insertion\"><a href=\"#Seam-Insertion\" class=\"headerlink\" title=\"Seam Insertion\"></a>Seam Insertion</h2><p>Horizontal Insertion (adding vertical seams): The function seam_vertical_record_mask uses the methods to find seams from seam deletion to keep a record of multiple seams that would be removed if a seam deletion is performed. The record is of the index of pixels in the original image that the seams are removing (so if a 5th seam is found, it would not keep track of the new index of the seam from the shrinked image after removing the previous 4 seams, but rather keeping track of positions in the original image). Using the seam indexes, the function seam_vertical_record_mask will duplicate seams that would be deleted in the performed order. Because inserting seams also changes the index of pixels in the original image, a matrix of original pixel index is stored, and the seam inserted is always on the index of the original image pixels. Thus, in the animation of the seam insertion, there will be times that the red line indicating seams became disconnected. This is because previous seams inserted have changed pixel positions in the image, and in order to insert corresponding seams, their pixel positions need to be adjusted too. The duplicated seam is the average of the three pixels surrounding it in the horizontal direction. Vertical Insertion (adding horizontal seams) is achieved similarly. </p>\n<h2 id=\"Some-Challenges\"><a href=\"#Some-Challenges\" class=\"headerlink\" title=\"Some Challenges\"></a>Some Challenges</h2><p>While implementing seam deletions, the most challenging aspect is to correctly set up dynamic program to find the seam. Because seam pixels need to be connected to previous pixels (can only be off by 1 pixel), when dynamically going through all pixels in an image, the range that the next step pixel can take is restricted to between +1 and -1 of the current pixel position. It also took some tries to figure out that using entropy as the energy function is relatively stable and easy to implement. Other functions that detect edges that I tried did not work as well in seam carving.<br>In my opinion, seam insertion is more challenging than seam carving. The intuitive solution is to find a seam, duplicate it, then find a new seam in the stretched image, and again duplicated it. This repeated seam insertion process, however, would not work because it would just be the same seam being duplicated again and again. Therefore, there is the need find at once set of all seams that would be removed if performing a seam deletion, then reverse-engineering these seams and duplicate each of them. It is also challenging to figure out how to correctly duplicate seams at correct pixels. The seams, if finding them the seam way as in seam deletion, would not work, because the image sizes have changed. Therefore, it is necessary to keep track of seams in the pixel index or positions in the original image’s perspective. And when inserting the duplicated seams, it is necessary again to use the original image’s indexes. </p>\n<p>The other challenging part of the project is to find out a way to minimize artifacts, especially on images where there is a specific object to keep intact. The solution I came up with is to use the getMask function that we have used in multiple other assignments. Using a user-specified black and white mask of the image, it is possible to increase energy on the masked regions when finding seams. Thus, the seam-finding algorithm will seek to avoid these regions.</p>\n<h2 id=\"Seam-Carving-and-Insertion-Processes\"><a href=\"#Seam-Carving-and-Insertion-Processes\" class=\"headerlink\" title=\"Seam Carving and Insertion Processes\"></a>Seam Carving and Insertion Processes</h2><p><a href=\"https://github.com/iasnobmatsu/SeamCarvingAndInsertion\">Code and more</a></p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>original image</p>\n<img src=\"/2022/11/04/002-seam/set4_original.jpg\" class=\"\">\n<p>removing 90 pixels horizontally</p>\n<img src=\"/2022/11/04/002-seam/set4_carved3.jpg\" class=\"\">\n<p>inseting 30 pixels horizontally</p>\n<img src=\"/2022/11/04/002-seam/set4_carved7.jpg\" class=\"\">\n<p><a href=\"https://jojo.fandom.com/wiki/Hirohiko_Araki_JoJo_Exhibition_2012?file=Exhib8.jpg\">original image</a></p>\n<img src=\"/2022/11/04/002-seam/set1_original.jpg\" class=\"\">\n<p>removing 90 pixels vertically </p>\n<img src=\"/2022/11/04/002-seam/set1_carved6.jpg\" class=\"\">\n<p>inseting 30 pixels vertically</p>\n<img src=\"/2022/11/04/002-seam/set1_carved8.jpg\" class=\"\">"},{"title":"Web Scraping with Python Using MyAnimeList as An Example","date":"2022-11-04T23:20:29.000Z","_content":"\n\nDisclaimer: The following code for scraping MAL was written on Dec 30th, 2020. MAL data structure may have changed after that.\n\n<!-- To downlaod the ipynb (python jupyter notebook) script I wrote for this post, please click [here]({{site.baseurl}}/html_assets/MALscrape/MALscrapper.ipynb).\n\nTo download the MAL top 3000 anime list csv file (collected Dec 29, 2020), please click [here]({{site.baseurl}}/html_assets/MALscrape/MALtop3000.csv).\n\nTo download my own MAL anime list csv file (collected Dec 30, 2020), please click [here]({{site.baseurl}}/html_assets/MALscrape/iasnobmatsuMAL.csv). -->\n\n### Scraping Static HTML: Using MAL Top Animes as An Example\n\n#### Import libraries\n\n- BeautifulSoup: for scraping\n- requests: request html and parse\n- re: regular expression for string manipulation\n- pandas: convert data scraped into csv files\n\n<!-- more -->\n\n\n```python\nfrom bs4 import BeautifulSoup \nimport requests\nimport re\nimport pandas as pd\n```\n\n#### Helper Function to Parse One Anime Row\n\n![]({{site.baseurl}}/images/MALscrape/static.png)\n\nLooking at the html of [https://myanimelist.net/topanime.php](https://myanimelist.net/topanime.php) (using chrome, right click and select inspect, navigate to the element section, and you will see the HTML), each anime is a tr (table row) of the table. Within each row, name of anime is wrapped in class anime_ranking_h3, related information in class information, and score in class score. These can be scraped with beautifulsoup rather simply using the select() function. Then the text can be cleaned.\n\nWe can further get a show's start year and end year from the related information section. Here I used regular expression to get 4 digits of year to match start and end years.\n\n\n```python\ndef getOneRow(targetrow):\n    animeTitle=targetrow.select(\"h3.anime_ranking_h3\")[0].text\n    animeInformation=targetrow.select(\"div.information\")[0].text.replace(\"\\n\",\"|\").replace(\"  \",\"\")\n\n    animeScore=targetrow.select(\"td.score\")[0].text.replace(\"\\n\", \"\")\n    # split by |\n    year=animeInformation.split(\"|\") \n    # get all years in the second section from above\n    years=re.findall('[0-9]+', year[2])\n    start=\"NA\"\n    end=\"NA\"\n    \n    if len(year)>0:\n        start=years[0]\n        if len(years)>1:\n            end=years[1]\n    return animeTitle, animeInformation,animeScore, start, end\n\n# tablerow[0]\n```\n\n#### Function to Get a Specified Number of Anime on The Top Anime List\n\nPass in the url into requests.get() function to get the entire page, then make a soup out of it with BeautifulSoup. With the soup ready, we could find the table corresponding to the top anime list and find all its rows. For each row, get desired data with the getOneRow() helper function. Because each page of the top anime list only has 50 animes, if requesting more than 50 anime, make sure to get a loop to scrape pages after the first one.\n\n\n```python\ndef getTopAnime(limit):\n    # I find using a dict to store data is the easiest, and it's easy to convert to JSON or csv\n    topanimedict=[] \n\n    #url\n    url = \"https://myanimelist.net/topanime.php\" \n    #make soup of html\n    soup = BeautifulSoup(requests.get(url).text, 'lxml') \n    #get table corresponding to the top anime table.\n    toptable = soup.select(\"table\")[0] \n    #get all rows in the table\n    tablerow=toptable.select(\"tr.ranking-list\") \n     #get data for each row\n    for row in tablerow:\n        anime, info, score, st, ed=getOneRow(row)\n        tempdict={\"anime\": anime,\"start\": st, \"end\":ed,  \"score\": score, \"information\": info}\n        topanimedict.append(tempdict)\n        \n    # get page 2, 3, 4 etc after the first one\n    if limit>50: \n        ind=limit//50\n        for i in range (1,ind):\n            url = \"https://myanimelist.net/topanime.php?limit=\"+str(50*i)\n            print(url)\n            soup = BeautifulSoup(requests.get(url).text, 'lxml')\n            toptable = soup.select(\"table\")[0]\n            tablerow=toptable.select(\"tr.ranking-list\")\n            for row in tablerow:\n                anime, info, score, st, ed=getOneRow(row)\n                tempdict={\"anime\": anime,\"start\": st, \"end\":ed,  \"score\": score, \"information\": info}\n                topanimedict.append(tempdict)\n    \n    topanimedf=pd.DataFrame.from_dict(topanimedict)\n    return topanimedf\n\n```\n\n#### Convert Data\n\nWith the help of a dictionary and the pandas library, it is really easy to convert what we scraped into a csv. This script will save the data to the same directory where the script is stored.\n\n\n```python\ndf=getTopAnime(3000)\ndf.to_csv('MALtop3000.csv', index=False)\n```\n\n    https://myanimelist.net/topanime.php?limit=50\n    https://myanimelist.net/topanime.php?limit=100\n    https://myanimelist.net/topanime.php?limit=150\n    https://myanimelist.net/topanime.php?limit=200\n    https://myanimelist.net/topanime.php?limit=250\n    https://myanimelist.net/topanime.php?limit=300\n    https://myanimelist.net/topanime.php?limit=350\n    https://myanimelist.net/topanime.php?limit=400\n    https://myanimelist.net/topanime.php?limit=450\n    https://myanimelist.net/topanime.php?limit=500\n    https://myanimelist.net/topanime.php?limit=550\n    https://myanimelist.net/topanime.php?limit=600\n    https://myanimelist.net/topanime.php?limit=650\n    https://myanimelist.net/topanime.php?limit=700\n    https://myanimelist.net/topanime.php?limit=750\n    https://myanimelist.net/topanime.php?limit=800\n    https://myanimelist.net/topanime.php?limit=850\n    https://myanimelist.net/topanime.php?limit=900\n    https://myanimelist.net/topanime.php?limit=950\n    https://myanimelist.net/topanime.php?limit=1000\n    https://myanimelist.net/topanime.php?limit=1050\n    https://myanimelist.net/topanime.php?limit=1100\n    https://myanimelist.net/topanime.php?limit=1150\n    https://myanimelist.net/topanime.php?limit=1200\n    https://myanimelist.net/topanime.php?limit=1250\n    https://myanimelist.net/topanime.php?limit=1300\n    https://myanimelist.net/topanime.php?limit=1350\n    https://myanimelist.net/topanime.php?limit=1400\n    https://myanimelist.net/topanime.php?limit=1450\n    https://myanimelist.net/topanime.php?limit=1500\n    https://myanimelist.net/topanime.php?limit=1550\n    https://myanimelist.net/topanime.php?limit=1600\n    https://myanimelist.net/topanime.php?limit=1650\n    https://myanimelist.net/topanime.php?limit=1700\n    https://myanimelist.net/topanime.php?limit=1750\n    https://myanimelist.net/topanime.php?limit=1800\n    https://myanimelist.net/topanime.php?limit=1850\n    https://myanimelist.net/topanime.php?limit=1900\n    https://myanimelist.net/topanime.php?limit=1950\n    https://myanimelist.net/topanime.php?limit=2000\n    https://myanimelist.net/topanime.php?limit=2050\n    https://myanimelist.net/topanime.php?limit=2100\n    https://myanimelist.net/topanime.php?limit=2150\n    https://myanimelist.net/topanime.php?limit=2200\n    https://myanimelist.net/topanime.php?limit=2250\n    https://myanimelist.net/topanime.php?limit=2300\n    https://myanimelist.net/topanime.php?limit=2350\n    https://myanimelist.net/topanime.php?limit=2400\n    https://myanimelist.net/topanime.php?limit=2450\n    https://myanimelist.net/topanime.php?limit=2500\n    https://myanimelist.net/topanime.php?limit=2550\n    https://myanimelist.net/topanime.php?limit=2600\n    https://myanimelist.net/topanime.php?limit=2650\n    https://myanimelist.net/topanime.php?limit=2700\n    https://myanimelist.net/topanime.php?limit=2750\n    https://myanimelist.net/topanime.php?limit=2800\n    https://myanimelist.net/topanime.php?limit=2850\n    https://myanimelist.net/topanime.php?limit=2900\n    https://myanimelist.net/topanime.php?limit=2950\n\n\nTake a look at the scrape data file. Looked pretty neat to me. Index is the ranking-1.\n\n\n```python\ndf.tail()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>anime</th>\n      <th>end</th>\n      <th>information</th>\n      <th>score</th>\n      <th>start</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2995</th>\n      <td>Sekirei</td>\n      <td>2008</td>\n      <td>|TV (12 eps)|Jul 2008 - Sep 2008|320,922 members|</td>\n      <td>7.14</td>\n      <td>2008</td>\n    </tr>\n    <tr>\n      <th>2996</th>\n      <td>Shin Atashin'chi</td>\n      <td>2016</td>\n      <td>|TV (26 eps)|Oct 2015 - Apr 2016|2,427 members|</td>\n      <td>7.14</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>2997</th>\n      <td>Tantei Opera Milky Holmes Movie: Gyakushuu no ...</td>\n      <td>2016</td>\n      <td>|Movie (1 eps)|Feb 2016 - Feb 2016|3,417 members|</td>\n      <td>7.14</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>2998</th>\n      <td>Tenchi Muyou! Manatsu no Eve</td>\n      <td>1997</td>\n      <td>|Movie (1 eps)|Aug 1997 - Aug 1997|13,514 memb...</td>\n      <td>7.14</td>\n      <td>1997</td>\n    </tr>\n    <tr>\n      <th>2999</th>\n      <td>Tengen Toppa Gurren Lagann: Parallel Works</td>\n      <td>2008</td>\n      <td>|Music (8 eps)|Jun 2008 - Sep 2008|29,743 memb...</td>\n      <td>7.14</td>\n      <td>2008</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Scraping Dynamic HTML: Using MAL user list as An Example\n\nwith the code here, you will be able to scrape any user's MAL. Here I used my own anime list as an example ([https://myanimelist.net/animelist/iasnobmatsu](https://myanimelist.net/animelist/iasnobmatsu), FYI I highly highly recommend Attack on Titan, Haikyu, and Hoseki no Kuni).\n\nDynamic HTML is different from static HTML as the static HTML is rendered from HTML source file (imaging writing an html file and that is what we scrape). Dynamic HTML, on the other side, is not rendered from HTML source files but from JavaScript (Or JQuery or React, whatever framework). Dynamic HTML, unlike static, is not generate the moment a url is opened, but will need some time to render after the document is ready.\n\n#### Helper Function to Get One Row of MAL User List\n\n![]({{site.baseurl}}/images/MALscrape/dynamic.png)\n\nSimilar to the getOneRow function(), this function parses specific data for one anime. This step is the same regardless of static or dynamic HTML.\n\n\n\n```python\ndef getOneRowMAL(targetrow):\n    animeTitle=targetrow.select(\"td.title\")[0].select(\"a.link.sort\")[0].text\n    animeType=targetrow.select(\"td.type\")[0].text.strip()\n    animeScore=targetrow.select(\"td.score\")[0].text.strip()\n    animeProgress=targetrow.select(\"td.progress\")[0].text.replace(\"\\n\", \"\").replace(\"  \",\"\")\n    return animeTitle, animeType,animeScore, animeProgress\n\ngetOneRowMAL(rows[27])\n```\n\n\n\n\n    ('Haikyuu!!', 'TV', '7', ' 25 ')\n\n\n\n#### Additional Libraries for Dynamic HTML\n\nFor scraping dynamic HTML, we need selenium and time. \n\n\n```python\nfrom selenium import webdriver\nimport time\n```\n\n#### Get Dynamic MAL User List Data\n\nto scrape dynamic data, we need the url of the webpage. We also need to have a web browser driver. Here I use the Chrome driver (download here [https://chromedriver.chromium.org/](https://chromedriver.chromium.org/) or through homebrew etc). I stored it in my download folder, and I will need the path to the driver. I used Mac and Chrome driver in this case. \n\nWith the url of webpage and path to browser driver ready, we will use selenium to declare a driver variable, and use it instead of requests to get the url.\n\nThen it is important to delay the rest of the function by some time, here I used .2 but it may differ depend on how fast a page loads on a specific device under specific internet conditions. This time allows dynamic HTML to render so we scrape the desired content instead of the intial script used to generate the HTML (which we cannot parse).\nThen similar steps to scrape each row of data from the user anime list using BeautifulSoup.\n\nWhen using selenium with webdriver to scrap data, the browser may pop open with the url. You should not close the window until the data is scraped. If the window is closedbefore beautifulsoup get the change to read code on the driver, it will not work.\n\n\n```python\ndef getMAL(url, driverPath):\n    MALdict=[]\n    # use selenium to simulate driver\n    driver = webdriver.Chrome(driverPath)\n    driver.get(url) # get page\n\n    time.sleep(0.2) # may need to change\n    # similar to static, get soup and parse\n    soup=BeautifulSoup(driver.page_source, 'lxml')\n    toptable = soup.select(\"table\")[0]\n    rows=toptable.select(\"tbody.list-item\")\n    for row in rows:\n        ti,ty,sc,pr=getOneRowMAL(row)\n        MALdict.append({\"anime\":ti,\"type\":ty, \"score\":sc,\"progress\":pr})\n    return pd.DataFrame.from_dict(MALdict)\n\n\n```\n\n#### Convert Data\n\nHere we use the function above to get dynamic HTML data from my MAL list (you can replace with any user's MAL list. The data is saved again to a CSV file.\n\n\n```python\nurl='https://myanimelist.net/animelist/iasnobmatsu'\ndriverp=\"/Users/ziqianxu/Downloads/chromedriver\"\ndf2=getMAL(url,driverp)\ndf2.to_csv('iasnobmatsuMAL.csv', index=False)\ndf2.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>anime</th>\n      <th>progress</th>\n      <th>score</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>JoJo no Kimyou na Bouken Part 3: Stardust Crus...</td>\n      <td>- / 24</td>\n      <td>8</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>One Piece</td>\n      <td>- / -</td>\n      <td>8</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Shingeki no Kyojin: The Final Season</td>\n      <td>- / 16</td>\n      <td>10</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Akagami no Shirayuki-hime</td>\n      <td>12</td>\n      <td>5</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bleach</td>\n      <td>366</td>\n      <td>7</td>\n      <td>TV</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n","source":"_posts/003-web-scraping.md","raw":"---\ntitle: Web Scraping with Python Using MyAnimeList as An Example\ndate: 2022-11-04 19:20:29\ncategories: \n- [algorithms]\ntags: [python, web scraping]\n---\n\n\nDisclaimer: The following code for scraping MAL was written on Dec 30th, 2020. MAL data structure may have changed after that.\n\n<!-- To downlaod the ipynb (python jupyter notebook) script I wrote for this post, please click [here]({{site.baseurl}}/html_assets/MALscrape/MALscrapper.ipynb).\n\nTo download the MAL top 3000 anime list csv file (collected Dec 29, 2020), please click [here]({{site.baseurl}}/html_assets/MALscrape/MALtop3000.csv).\n\nTo download my own MAL anime list csv file (collected Dec 30, 2020), please click [here]({{site.baseurl}}/html_assets/MALscrape/iasnobmatsuMAL.csv). -->\n\n### Scraping Static HTML: Using MAL Top Animes as An Example\n\n#### Import libraries\n\n- BeautifulSoup: for scraping\n- requests: request html and parse\n- re: regular expression for string manipulation\n- pandas: convert data scraped into csv files\n\n<!-- more -->\n\n\n```python\nfrom bs4 import BeautifulSoup \nimport requests\nimport re\nimport pandas as pd\n```\n\n#### Helper Function to Parse One Anime Row\n\n![]({{site.baseurl}}/images/MALscrape/static.png)\n\nLooking at the html of [https://myanimelist.net/topanime.php](https://myanimelist.net/topanime.php) (using chrome, right click and select inspect, navigate to the element section, and you will see the HTML), each anime is a tr (table row) of the table. Within each row, name of anime is wrapped in class anime_ranking_h3, related information in class information, and score in class score. These can be scraped with beautifulsoup rather simply using the select() function. Then the text can be cleaned.\n\nWe can further get a show's start year and end year from the related information section. Here I used regular expression to get 4 digits of year to match start and end years.\n\n\n```python\ndef getOneRow(targetrow):\n    animeTitle=targetrow.select(\"h3.anime_ranking_h3\")[0].text\n    animeInformation=targetrow.select(\"div.information\")[0].text.replace(\"\\n\",\"|\").replace(\"  \",\"\")\n\n    animeScore=targetrow.select(\"td.score\")[0].text.replace(\"\\n\", \"\")\n    # split by |\n    year=animeInformation.split(\"|\") \n    # get all years in the second section from above\n    years=re.findall('[0-9]+', year[2])\n    start=\"NA\"\n    end=\"NA\"\n    \n    if len(year)>0:\n        start=years[0]\n        if len(years)>1:\n            end=years[1]\n    return animeTitle, animeInformation,animeScore, start, end\n\n# tablerow[0]\n```\n\n#### Function to Get a Specified Number of Anime on The Top Anime List\n\nPass in the url into requests.get() function to get the entire page, then make a soup out of it with BeautifulSoup. With the soup ready, we could find the table corresponding to the top anime list and find all its rows. For each row, get desired data with the getOneRow() helper function. Because each page of the top anime list only has 50 animes, if requesting more than 50 anime, make sure to get a loop to scrape pages after the first one.\n\n\n```python\ndef getTopAnime(limit):\n    # I find using a dict to store data is the easiest, and it's easy to convert to JSON or csv\n    topanimedict=[] \n\n    #url\n    url = \"https://myanimelist.net/topanime.php\" \n    #make soup of html\n    soup = BeautifulSoup(requests.get(url).text, 'lxml') \n    #get table corresponding to the top anime table.\n    toptable = soup.select(\"table\")[0] \n    #get all rows in the table\n    tablerow=toptable.select(\"tr.ranking-list\") \n     #get data for each row\n    for row in tablerow:\n        anime, info, score, st, ed=getOneRow(row)\n        tempdict={\"anime\": anime,\"start\": st, \"end\":ed,  \"score\": score, \"information\": info}\n        topanimedict.append(tempdict)\n        \n    # get page 2, 3, 4 etc after the first one\n    if limit>50: \n        ind=limit//50\n        for i in range (1,ind):\n            url = \"https://myanimelist.net/topanime.php?limit=\"+str(50*i)\n            print(url)\n            soup = BeautifulSoup(requests.get(url).text, 'lxml')\n            toptable = soup.select(\"table\")[0]\n            tablerow=toptable.select(\"tr.ranking-list\")\n            for row in tablerow:\n                anime, info, score, st, ed=getOneRow(row)\n                tempdict={\"anime\": anime,\"start\": st, \"end\":ed,  \"score\": score, \"information\": info}\n                topanimedict.append(tempdict)\n    \n    topanimedf=pd.DataFrame.from_dict(topanimedict)\n    return topanimedf\n\n```\n\n#### Convert Data\n\nWith the help of a dictionary and the pandas library, it is really easy to convert what we scraped into a csv. This script will save the data to the same directory where the script is stored.\n\n\n```python\ndf=getTopAnime(3000)\ndf.to_csv('MALtop3000.csv', index=False)\n```\n\n    https://myanimelist.net/topanime.php?limit=50\n    https://myanimelist.net/topanime.php?limit=100\n    https://myanimelist.net/topanime.php?limit=150\n    https://myanimelist.net/topanime.php?limit=200\n    https://myanimelist.net/topanime.php?limit=250\n    https://myanimelist.net/topanime.php?limit=300\n    https://myanimelist.net/topanime.php?limit=350\n    https://myanimelist.net/topanime.php?limit=400\n    https://myanimelist.net/topanime.php?limit=450\n    https://myanimelist.net/topanime.php?limit=500\n    https://myanimelist.net/topanime.php?limit=550\n    https://myanimelist.net/topanime.php?limit=600\n    https://myanimelist.net/topanime.php?limit=650\n    https://myanimelist.net/topanime.php?limit=700\n    https://myanimelist.net/topanime.php?limit=750\n    https://myanimelist.net/topanime.php?limit=800\n    https://myanimelist.net/topanime.php?limit=850\n    https://myanimelist.net/topanime.php?limit=900\n    https://myanimelist.net/topanime.php?limit=950\n    https://myanimelist.net/topanime.php?limit=1000\n    https://myanimelist.net/topanime.php?limit=1050\n    https://myanimelist.net/topanime.php?limit=1100\n    https://myanimelist.net/topanime.php?limit=1150\n    https://myanimelist.net/topanime.php?limit=1200\n    https://myanimelist.net/topanime.php?limit=1250\n    https://myanimelist.net/topanime.php?limit=1300\n    https://myanimelist.net/topanime.php?limit=1350\n    https://myanimelist.net/topanime.php?limit=1400\n    https://myanimelist.net/topanime.php?limit=1450\n    https://myanimelist.net/topanime.php?limit=1500\n    https://myanimelist.net/topanime.php?limit=1550\n    https://myanimelist.net/topanime.php?limit=1600\n    https://myanimelist.net/topanime.php?limit=1650\n    https://myanimelist.net/topanime.php?limit=1700\n    https://myanimelist.net/topanime.php?limit=1750\n    https://myanimelist.net/topanime.php?limit=1800\n    https://myanimelist.net/topanime.php?limit=1850\n    https://myanimelist.net/topanime.php?limit=1900\n    https://myanimelist.net/topanime.php?limit=1950\n    https://myanimelist.net/topanime.php?limit=2000\n    https://myanimelist.net/topanime.php?limit=2050\n    https://myanimelist.net/topanime.php?limit=2100\n    https://myanimelist.net/topanime.php?limit=2150\n    https://myanimelist.net/topanime.php?limit=2200\n    https://myanimelist.net/topanime.php?limit=2250\n    https://myanimelist.net/topanime.php?limit=2300\n    https://myanimelist.net/topanime.php?limit=2350\n    https://myanimelist.net/topanime.php?limit=2400\n    https://myanimelist.net/topanime.php?limit=2450\n    https://myanimelist.net/topanime.php?limit=2500\n    https://myanimelist.net/topanime.php?limit=2550\n    https://myanimelist.net/topanime.php?limit=2600\n    https://myanimelist.net/topanime.php?limit=2650\n    https://myanimelist.net/topanime.php?limit=2700\n    https://myanimelist.net/topanime.php?limit=2750\n    https://myanimelist.net/topanime.php?limit=2800\n    https://myanimelist.net/topanime.php?limit=2850\n    https://myanimelist.net/topanime.php?limit=2900\n    https://myanimelist.net/topanime.php?limit=2950\n\n\nTake a look at the scrape data file. Looked pretty neat to me. Index is the ranking-1.\n\n\n```python\ndf.tail()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>anime</th>\n      <th>end</th>\n      <th>information</th>\n      <th>score</th>\n      <th>start</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2995</th>\n      <td>Sekirei</td>\n      <td>2008</td>\n      <td>|TV (12 eps)|Jul 2008 - Sep 2008|320,922 members|</td>\n      <td>7.14</td>\n      <td>2008</td>\n    </tr>\n    <tr>\n      <th>2996</th>\n      <td>Shin Atashin'chi</td>\n      <td>2016</td>\n      <td>|TV (26 eps)|Oct 2015 - Apr 2016|2,427 members|</td>\n      <td>7.14</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>2997</th>\n      <td>Tantei Opera Milky Holmes Movie: Gyakushuu no ...</td>\n      <td>2016</td>\n      <td>|Movie (1 eps)|Feb 2016 - Feb 2016|3,417 members|</td>\n      <td>7.14</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>2998</th>\n      <td>Tenchi Muyou! Manatsu no Eve</td>\n      <td>1997</td>\n      <td>|Movie (1 eps)|Aug 1997 - Aug 1997|13,514 memb...</td>\n      <td>7.14</td>\n      <td>1997</td>\n    </tr>\n    <tr>\n      <th>2999</th>\n      <td>Tengen Toppa Gurren Lagann: Parallel Works</td>\n      <td>2008</td>\n      <td>|Music (8 eps)|Jun 2008 - Sep 2008|29,743 memb...</td>\n      <td>7.14</td>\n      <td>2008</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n### Scraping Dynamic HTML: Using MAL user list as An Example\n\nwith the code here, you will be able to scrape any user's MAL. Here I used my own anime list as an example ([https://myanimelist.net/animelist/iasnobmatsu](https://myanimelist.net/animelist/iasnobmatsu), FYI I highly highly recommend Attack on Titan, Haikyu, and Hoseki no Kuni).\n\nDynamic HTML is different from static HTML as the static HTML is rendered from HTML source file (imaging writing an html file and that is what we scrape). Dynamic HTML, on the other side, is not rendered from HTML source files but from JavaScript (Or JQuery or React, whatever framework). Dynamic HTML, unlike static, is not generate the moment a url is opened, but will need some time to render after the document is ready.\n\n#### Helper Function to Get One Row of MAL User List\n\n![]({{site.baseurl}}/images/MALscrape/dynamic.png)\n\nSimilar to the getOneRow function(), this function parses specific data for one anime. This step is the same regardless of static or dynamic HTML.\n\n\n\n```python\ndef getOneRowMAL(targetrow):\n    animeTitle=targetrow.select(\"td.title\")[0].select(\"a.link.sort\")[0].text\n    animeType=targetrow.select(\"td.type\")[0].text.strip()\n    animeScore=targetrow.select(\"td.score\")[0].text.strip()\n    animeProgress=targetrow.select(\"td.progress\")[0].text.replace(\"\\n\", \"\").replace(\"  \",\"\")\n    return animeTitle, animeType,animeScore, animeProgress\n\ngetOneRowMAL(rows[27])\n```\n\n\n\n\n    ('Haikyuu!!', 'TV', '7', ' 25 ')\n\n\n\n#### Additional Libraries for Dynamic HTML\n\nFor scraping dynamic HTML, we need selenium and time. \n\n\n```python\nfrom selenium import webdriver\nimport time\n```\n\n#### Get Dynamic MAL User List Data\n\nto scrape dynamic data, we need the url of the webpage. We also need to have a web browser driver. Here I use the Chrome driver (download here [https://chromedriver.chromium.org/](https://chromedriver.chromium.org/) or through homebrew etc). I stored it in my download folder, and I will need the path to the driver. I used Mac and Chrome driver in this case. \n\nWith the url of webpage and path to browser driver ready, we will use selenium to declare a driver variable, and use it instead of requests to get the url.\n\nThen it is important to delay the rest of the function by some time, here I used .2 but it may differ depend on how fast a page loads on a specific device under specific internet conditions. This time allows dynamic HTML to render so we scrape the desired content instead of the intial script used to generate the HTML (which we cannot parse).\nThen similar steps to scrape each row of data from the user anime list using BeautifulSoup.\n\nWhen using selenium with webdriver to scrap data, the browser may pop open with the url. You should not close the window until the data is scraped. If the window is closedbefore beautifulsoup get the change to read code on the driver, it will not work.\n\n\n```python\ndef getMAL(url, driverPath):\n    MALdict=[]\n    # use selenium to simulate driver\n    driver = webdriver.Chrome(driverPath)\n    driver.get(url) # get page\n\n    time.sleep(0.2) # may need to change\n    # similar to static, get soup and parse\n    soup=BeautifulSoup(driver.page_source, 'lxml')\n    toptable = soup.select(\"table\")[0]\n    rows=toptable.select(\"tbody.list-item\")\n    for row in rows:\n        ti,ty,sc,pr=getOneRowMAL(row)\n        MALdict.append({\"anime\":ti,\"type\":ty, \"score\":sc,\"progress\":pr})\n    return pd.DataFrame.from_dict(MALdict)\n\n\n```\n\n#### Convert Data\n\nHere we use the function above to get dynamic HTML data from my MAL list (you can replace with any user's MAL list. The data is saved again to a CSV file.\n\n\n```python\nurl='https://myanimelist.net/animelist/iasnobmatsu'\ndriverp=\"/Users/ziqianxu/Downloads/chromedriver\"\ndf2=getMAL(url,driverp)\ndf2.to_csv('iasnobmatsuMAL.csv', index=False)\ndf2.head()\n```\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>anime</th>\n      <th>progress</th>\n      <th>score</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>JoJo no Kimyou na Bouken Part 3: Stardust Crus...</td>\n      <td>- / 24</td>\n      <td>8</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>One Piece</td>\n      <td>- / -</td>\n      <td>8</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Shingeki no Kyojin: The Final Season</td>\n      <td>- / 16</td>\n      <td>10</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Akagami no Shirayuki-hime</td>\n      <td>12</td>\n      <td>5</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bleach</td>\n      <td>366</td>\n      <td>7</td>\n      <td>TV</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n","slug":"003-web-scraping","published":1,"updated":"2022-11-04T23:37:17.879Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cla36n5vf00048kvg529bfnv3","content":"<p>Disclaimer: The following code for scraping MAL was written on Dec 30th, 2020. MAL data structure may have changed after that.</p>\n<!-- To downlaod the ipynb (python jupyter notebook) script I wrote for this post, please click [here](/html_assets/MALscrape/MALscrapper.ipynb).\n\nTo download the MAL top 3000 anime list csv file (collected Dec 29, 2020), please click [here](/html_assets/MALscrape/MALtop3000.csv).\n\nTo download my own MAL anime list csv file (collected Dec 30, 2020), please click [here](/html_assets/MALscrape/iasnobmatsuMAL.csv). -->\n<h3 id=\"Scraping-Static-HTML-Using-MAL-Top-Animes-as-An-Example\"><a href=\"#Scraping-Static-HTML-Using-MAL-Top-Animes-as-An-Example\" class=\"headerlink\" title=\"Scraping Static HTML: Using MAL Top Animes as An Example\"></a>Scraping Static HTML: Using MAL Top Animes as An Example</h3><h4 id=\"Import-libraries\"><a href=\"#Import-libraries\" class=\"headerlink\" title=\"Import libraries\"></a>Import libraries</h4><ul>\n<li>BeautifulSoup: for scraping</li>\n<li>requests: request html and parse</li>\n<li>re: regular expression for string manipulation</li>\n<li>pandas: convert data scraped into csv files</li>\n</ul>\n<span id=\"more\"></span>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup </span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br></pre></td></tr></table></figure>\n<h4 id=\"Helper-Function-to-Parse-One-Anime-Row\"><a href=\"#Helper-Function-to-Parse-One-Anime-Row\" class=\"headerlink\" title=\"Helper Function to Parse One Anime Row\"></a>Helper Function to Parse One Anime Row</h4><p><img src=\"!--swig￼12--&gt;/images/MALscrape/static.png\" alt=\"\"></p>\n<p>Looking at the html of <a href=\"https://myanimelist.net/topanime.php\">https://myanimelist.net/topanime.php</a> (using chrome, right click and select inspect, navigate to the element section, and you will see the HTML), each anime is a tr (table row) of the table. Within each row, name of anime is wrapped in class anime_ranking_h3, related information in class information, and score in class score. These can be scraped with beautifulsoup rather simply using the select() function. Then the text can be cleaned.</p>\n<p>We can further get a show’s start year and end year from the related information section. Here I used regular expression to get 4 digits of year to match start and end years.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getOneRow</span>(<span class=\"params\">targetrow</span>):</span><br><span class=\"line\">    animeTitle=targetrow.select(<span class=\"string\">&quot;h3.anime_ranking_h3&quot;</span>)[<span class=\"number\">0</span>].text</span><br><span class=\"line\">    animeInformation=targetrow.select(<span class=\"string\">&quot;div.information&quot;</span>)[<span class=\"number\">0</span>].text.replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;|&quot;</span>).replace(<span class=\"string\">&quot;  &quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    animeScore=targetrow.select(<span class=\"string\">&quot;td.score&quot;</span>)[<span class=\"number\">0</span>].text.replace(<span class=\"string\">&quot;\\n&quot;</span>, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># split by |</span></span><br><span class=\"line\">    year=animeInformation.split(<span class=\"string\">&quot;|&quot;</span>) </span><br><span class=\"line\">    <span class=\"comment\"># get all years in the second section from above</span></span><br><span class=\"line\">    years=re.findall(<span class=\"string\">&#x27;[0-9]+&#x27;</span>, year[<span class=\"number\">2</span>])</span><br><span class=\"line\">    start=<span class=\"string\">&quot;NA&quot;</span></span><br><span class=\"line\">    end=<span class=\"string\">&quot;NA&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(year)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        start=years[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(years)&gt;<span class=\"number\">1</span>:</span><br><span class=\"line\">            end=years[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animeTitle, animeInformation,animeScore, start, end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tablerow[0]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Function-to-Get-a-Specified-Number-of-Anime-on-The-Top-Anime-List\"><a href=\"#Function-to-Get-a-Specified-Number-of-Anime-on-The-Top-Anime-List\" class=\"headerlink\" title=\"Function to Get a Specified Number of Anime on The Top Anime List\"></a>Function to Get a Specified Number of Anime on The Top Anime List</h4><p>Pass in the url into requests.get() function to get the entire page, then make a soup out of it with BeautifulSoup. With the soup ready, we could find the table corresponding to the top anime list and find all its rows. For each row, get desired data with the getOneRow() helper function. Because each page of the top anime list only has 50 animes, if requesting more than 50 anime, make sure to get a loop to scrape pages after the first one.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getTopAnime</span>(<span class=\"params\">limit</span>):</span><br><span class=\"line\">    <span class=\"comment\"># I find using a dict to store data is the easiest, and it&#x27;s easy to convert to JSON or csv</span></span><br><span class=\"line\">    topanimedict=[] </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#url</span></span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://myanimelist.net/topanime.php&quot;</span> </span><br><span class=\"line\">    <span class=\"comment\">#make soup of html</span></span><br><span class=\"line\">    soup = BeautifulSoup(requests.get(url).text, <span class=\"string\">&#x27;lxml&#x27;</span>) </span><br><span class=\"line\">    <span class=\"comment\">#get table corresponding to the top anime table.</span></span><br><span class=\"line\">    toptable = soup.select(<span class=\"string\">&quot;table&quot;</span>)[<span class=\"number\">0</span>] </span><br><span class=\"line\">    <span class=\"comment\">#get all rows in the table</span></span><br><span class=\"line\">    tablerow=toptable.select(<span class=\"string\">&quot;tr.ranking-list&quot;</span>) </span><br><span class=\"line\">     <span class=\"comment\">#get data for each row</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> tablerow:</span><br><span class=\"line\">        anime, info, score, st, ed=getOneRow(row)</span><br><span class=\"line\">        tempdict=&#123;<span class=\"string\">&quot;anime&quot;</span>: anime,<span class=\"string\">&quot;start&quot;</span>: st, <span class=\"string\">&quot;end&quot;</span>:ed,  <span class=\"string\">&quot;score&quot;</span>: score, <span class=\"string\">&quot;information&quot;</span>: info&#125;</span><br><span class=\"line\">        topanimedict.append(tempdict)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># get page 2, 3, 4 etc after the first one</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> limit&gt;<span class=\"number\">50</span>: </span><br><span class=\"line\">        ind=limit//<span class=\"number\">50</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">1</span>,ind):</span><br><span class=\"line\">            url = <span class=\"string\">&quot;https://myanimelist.net/topanime.php?limit=&quot;</span>+<span class=\"built_in\">str</span>(<span class=\"number\">50</span>*i)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(url)</span><br><span class=\"line\">            soup = BeautifulSoup(requests.get(url).text, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">            toptable = soup.select(<span class=\"string\">&quot;table&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            tablerow=toptable.select(<span class=\"string\">&quot;tr.ranking-list&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> tablerow:</span><br><span class=\"line\">                anime, info, score, st, ed=getOneRow(row)</span><br><span class=\"line\">                tempdict=&#123;<span class=\"string\">&quot;anime&quot;</span>: anime,<span class=\"string\">&quot;start&quot;</span>: st, <span class=\"string\">&quot;end&quot;</span>:ed,  <span class=\"string\">&quot;score&quot;</span>: score, <span class=\"string\">&quot;information&quot;</span>: info&#125;</span><br><span class=\"line\">                topanimedict.append(tempdict)</span><br><span class=\"line\">    </span><br><span class=\"line\">    topanimedf=pd.DataFrame.from_dict(topanimedict)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> topanimedf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Convert-Data\"><a href=\"#Convert-Data\" class=\"headerlink\" title=\"Convert Data\"></a>Convert Data</h4><p>With the help of a dictionary and the pandas library, it is really easy to convert what we scraped into a csv. This script will save the data to the same directory where the script is stored.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df=getTopAnime(<span class=\"number\">3000</span>)</span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;MALtop3000.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>https://myanimelist.net/topanime.php?limit=50\nhttps://myanimelist.net/topanime.php?limit=100\nhttps://myanimelist.net/topanime.php?limit=150\nhttps://myanimelist.net/topanime.php?limit=200\nhttps://myanimelist.net/topanime.php?limit=250\nhttps://myanimelist.net/topanime.php?limit=300\nhttps://myanimelist.net/topanime.php?limit=350\nhttps://myanimelist.net/topanime.php?limit=400\nhttps://myanimelist.net/topanime.php?limit=450\nhttps://myanimelist.net/topanime.php?limit=500\nhttps://myanimelist.net/topanime.php?limit=550\nhttps://myanimelist.net/topanime.php?limit=600\nhttps://myanimelist.net/topanime.php?limit=650\nhttps://myanimelist.net/topanime.php?limit=700\nhttps://myanimelist.net/topanime.php?limit=750\nhttps://myanimelist.net/topanime.php?limit=800\nhttps://myanimelist.net/topanime.php?limit=850\nhttps://myanimelist.net/topanime.php?limit=900\nhttps://myanimelist.net/topanime.php?limit=950\nhttps://myanimelist.net/topanime.php?limit=1000\nhttps://myanimelist.net/topanime.php?limit=1050\nhttps://myanimelist.net/topanime.php?limit=1100\nhttps://myanimelist.net/topanime.php?limit=1150\nhttps://myanimelist.net/topanime.php?limit=1200\nhttps://myanimelist.net/topanime.php?limit=1250\nhttps://myanimelist.net/topanime.php?limit=1300\nhttps://myanimelist.net/topanime.php?limit=1350\nhttps://myanimelist.net/topanime.php?limit=1400\nhttps://myanimelist.net/topanime.php?limit=1450\nhttps://myanimelist.net/topanime.php?limit=1500\nhttps://myanimelist.net/topanime.php?limit=1550\nhttps://myanimelist.net/topanime.php?limit=1600\nhttps://myanimelist.net/topanime.php?limit=1650\nhttps://myanimelist.net/topanime.php?limit=1700\nhttps://myanimelist.net/topanime.php?limit=1750\nhttps://myanimelist.net/topanime.php?limit=1800\nhttps://myanimelist.net/topanime.php?limit=1850\nhttps://myanimelist.net/topanime.php?limit=1900\nhttps://myanimelist.net/topanime.php?limit=1950\nhttps://myanimelist.net/topanime.php?limit=2000\nhttps://myanimelist.net/topanime.php?limit=2050\nhttps://myanimelist.net/topanime.php?limit=2100\nhttps://myanimelist.net/topanime.php?limit=2150\nhttps://myanimelist.net/topanime.php?limit=2200\nhttps://myanimelist.net/topanime.php?limit=2250\nhttps://myanimelist.net/topanime.php?limit=2300\nhttps://myanimelist.net/topanime.php?limit=2350\nhttps://myanimelist.net/topanime.php?limit=2400\nhttps://myanimelist.net/topanime.php?limit=2450\nhttps://myanimelist.net/topanime.php?limit=2500\nhttps://myanimelist.net/topanime.php?limit=2550\nhttps://myanimelist.net/topanime.php?limit=2600\nhttps://myanimelist.net/topanime.php?limit=2650\nhttps://myanimelist.net/topanime.php?limit=2700\nhttps://myanimelist.net/topanime.php?limit=2750\nhttps://myanimelist.net/topanime.php?limit=2800\nhttps://myanimelist.net/topanime.php?limit=2850\nhttps://myanimelist.net/topanime.php?limit=2900\nhttps://myanimelist.net/topanime.php?limit=2950\n</code></pre><p>Take a look at the scrape data file. Looked pretty neat to me. Index is the ranking-1.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.tail()</span><br></pre></td></tr></table></figure>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>anime</th>\n      <th>end</th>\n      <th>information</th>\n      <th>score</th>\n      <th>start</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2995</th>\n      <td>Sekirei</td>\n      <td>2008</td>\n      <td>|TV (12 eps)|Jul 2008 - Sep 2008|320,922 members|</td>\n      <td>7.14</td>\n      <td>2008</td>\n    </tr>\n    <tr>\n      <th>2996</th>\n      <td>Shin Atashin'chi</td>\n      <td>2016</td>\n      <td>|TV (26 eps)|Oct 2015 - Apr 2016|2,427 members|</td>\n      <td>7.14</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>2997</th>\n      <td>Tantei Opera Milky Holmes Movie: Gyakushuu no ...</td>\n      <td>2016</td>\n      <td>|Movie (1 eps)|Feb 2016 - Feb 2016|3,417 members|</td>\n      <td>7.14</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>2998</th>\n      <td>Tenchi Muyou! Manatsu no Eve</td>\n      <td>1997</td>\n      <td>|Movie (1 eps)|Aug 1997 - Aug 1997|13,514 memb...</td>\n      <td>7.14</td>\n      <td>1997</td>\n    </tr>\n    <tr>\n      <th>2999</th>\n      <td>Tengen Toppa Gurren Lagann: Parallel Works</td>\n      <td>2008</td>\n      <td>|Music (8 eps)|Jun 2008 - Sep 2008|29,743 memb...</td>\n      <td>7.14</td>\n      <td>2008</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"Scraping-Dynamic-HTML-Using-MAL-user-list-as-An-Example\"><a href=\"#Scraping-Dynamic-HTML-Using-MAL-user-list-as-An-Example\" class=\"headerlink\" title=\"Scraping Dynamic HTML: Using MAL user list as An Example\"></a>Scraping Dynamic HTML: Using MAL user list as An Example</h3><p>with the code here, you will be able to scrape any user’s MAL. Here I used my own anime list as an example (<a href=\"https://myanimelist.net/animelist/iasnobmatsu\">https://myanimelist.net/animelist/iasnobmatsu</a>, FYI I highly highly recommend Attack on Titan, Haikyu, and Hoseki no Kuni).</p>\n<p>Dynamic HTML is different from static HTML as the static HTML is rendered from HTML source file (imaging writing an html file and that is what we scrape). Dynamic HTML, on the other side, is not rendered from HTML source files but from JavaScript (Or JQuery or React, whatever framework). Dynamic HTML, unlike static, is not generate the moment a url is opened, but will need some time to render after the document is ready.</p>\n<h4 id=\"Helper-Function-to-Get-One-Row-of-MAL-User-List\"><a href=\"#Helper-Function-to-Get-One-Row-of-MAL-User-List\" class=\"headerlink\" title=\"Helper Function to Get One Row of MAL User List\"></a>Helper Function to Get One Row of MAL User List</h4><p><img src=\"!--swig￼13--&gt;/images/MALscrape/dynamic.png\" alt=\"\"></p>\n<p>Similar to the getOneRow function(), this function parses specific data for one anime. This step is the same regardless of static or dynamic HTML.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getOneRowMAL</span>(<span class=\"params\">targetrow</span>):</span><br><span class=\"line\">    animeTitle=targetrow.select(<span class=\"string\">&quot;td.title&quot;</span>)[<span class=\"number\">0</span>].select(<span class=\"string\">&quot;a.link.sort&quot;</span>)[<span class=\"number\">0</span>].text</span><br><span class=\"line\">    animeType=targetrow.select(<span class=\"string\">&quot;td.type&quot;</span>)[<span class=\"number\">0</span>].text.strip()</span><br><span class=\"line\">    animeScore=targetrow.select(<span class=\"string\">&quot;td.score&quot;</span>)[<span class=\"number\">0</span>].text.strip()</span><br><span class=\"line\">    animeProgress=targetrow.select(<span class=\"string\">&quot;td.progress&quot;</span>)[<span class=\"number\">0</span>].text.replace(<span class=\"string\">&quot;\\n&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;  &quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animeTitle, animeType,animeScore, animeProgress</span><br><span class=\"line\"></span><br><span class=\"line\">getOneRowMAL(rows[<span class=\"number\">27</span>])</span><br></pre></td></tr></table></figure>\n<pre><code>(&#39;Haikyuu!!&#39;, &#39;TV&#39;, &#39;7&#39;, &#39; 25 &#39;)\n</code></pre><h4 id=\"Additional-Libraries-for-Dynamic-HTML\"><a href=\"#Additional-Libraries-for-Dynamic-HTML\" class=\"headerlink\" title=\"Additional Libraries for Dynamic HTML\"></a>Additional Libraries for Dynamic HTML</h4><p>For scraping dynamic HTML, we need selenium and time. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br></pre></td></tr></table></figure>\n<h4 id=\"Get-Dynamic-MAL-User-List-Data\"><a href=\"#Get-Dynamic-MAL-User-List-Data\" class=\"headerlink\" title=\"Get Dynamic MAL User List Data\"></a>Get Dynamic MAL User List Data</h4><p>to scrape dynamic data, we need the url of the webpage. We also need to have a web browser driver. Here I use the Chrome driver (download here <a href=\"https://chromedriver.chromium.org/\">https://chromedriver.chromium.org/</a> or through homebrew etc). I stored it in my download folder, and I will need the path to the driver. I used Mac and Chrome driver in this case. </p>\n<p>With the url of webpage and path to browser driver ready, we will use selenium to declare a driver variable, and use it instead of requests to get the url.</p>\n<p>Then it is important to delay the rest of the function by some time, here I used .2 but it may differ depend on how fast a page loads on a specific device under specific internet conditions. This time allows dynamic HTML to render so we scrape the desired content instead of the intial script used to generate the HTML (which we cannot parse).<br>Then similar steps to scrape each row of data from the user anime list using BeautifulSoup.</p>\n<p>When using selenium with webdriver to scrap data, the browser may pop open with the url. You should not close the window until the data is scraped. If the window is closedbefore beautifulsoup get the change to read code on the driver, it will not work.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getMAL</span>(<span class=\"params\">url, driverPath</span>):</span><br><span class=\"line\">    MALdict=[]</span><br><span class=\"line\">    <span class=\"comment\"># use selenium to simulate driver</span></span><br><span class=\"line\">    driver = webdriver.Chrome(driverPath)</span><br><span class=\"line\">    driver.get(url) <span class=\"comment\"># get page</span></span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.2</span>) <span class=\"comment\"># may need to change</span></span><br><span class=\"line\">    <span class=\"comment\"># similar to static, get soup and parse</span></span><br><span class=\"line\">    soup=BeautifulSoup(driver.page_source, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">    toptable = soup.select(<span class=\"string\">&quot;table&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    rows=toptable.select(<span class=\"string\">&quot;tbody.list-item&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> rows:</span><br><span class=\"line\">        ti,ty,sc,pr=getOneRowMAL(row)</span><br><span class=\"line\">        MALdict.append(&#123;<span class=\"string\">&quot;anime&quot;</span>:ti,<span class=\"string\">&quot;type&quot;</span>:ty, <span class=\"string\">&quot;score&quot;</span>:sc,<span class=\"string\">&quot;progress&quot;</span>:pr&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd.DataFrame.from_dict(MALdict)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Convert-Data-1\"><a href=\"#Convert-Data-1\" class=\"headerlink\" title=\"Convert Data\"></a>Convert Data</h4><p>Here we use the function above to get dynamic HTML data from my MAL list (you can replace with any user’s MAL list. The data is saved again to a CSV file.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url=<span class=\"string\">&#x27;https://myanimelist.net/animelist/iasnobmatsu&#x27;</span></span><br><span class=\"line\">driverp=<span class=\"string\">&quot;/Users/ziqianxu/Downloads/chromedriver&quot;</span></span><br><span class=\"line\">df2=getMAL(url,driverp)</span><br><span class=\"line\">df2.to_csv(<span class=\"string\">&#x27;iasnobmatsuMAL.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\">df2.head()</span><br></pre></td></tr></table></figure>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>anime</th>\n      <th>progress</th>\n      <th>score</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>JoJo no Kimyou na Bouken Part 3: Stardust Crus...</td>\n      <td>- / 24</td>\n      <td>8</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>One Piece</td>\n      <td>- / -</td>\n      <td>8</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Shingeki no Kyojin: The Final Season</td>\n      <td>- / 16</td>\n      <td>10</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Akagami no Shirayuki-hime</td>\n      <td>12</td>\n      <td>5</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bleach</td>\n      <td>366</td>\n      <td>7</td>\n      <td>TV</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n","site":{"data":{}},"excerpt":"<p>Disclaimer: The following code for scraping MAL was written on Dec 30th, 2020. MAL data structure may have changed after that.</p>\n<!-- To downlaod the ipynb (python jupyter notebook) script I wrote for this post, please click [here](/html_assets/MALscrape/MALscrapper.ipynb).\n\nTo download the MAL top 3000 anime list csv file (collected Dec 29, 2020), please click [here](/html_assets/MALscrape/MALtop3000.csv).\n\nTo download my own MAL anime list csv file (collected Dec 30, 2020), please click [here](/html_assets/MALscrape/iasnobmatsuMAL.csv). -->\n<h3 id=\"Scraping-Static-HTML-Using-MAL-Top-Animes-as-An-Example\"><a href=\"#Scraping-Static-HTML-Using-MAL-Top-Animes-as-An-Example\" class=\"headerlink\" title=\"Scraping Static HTML: Using MAL Top Animes as An Example\"></a>Scraping Static HTML: Using MAL Top Animes as An Example</h3><h4 id=\"Import-libraries\"><a href=\"#Import-libraries\" class=\"headerlink\" title=\"Import libraries\"></a>Import libraries</h4><ul>\n<li>BeautifulSoup: for scraping</li>\n<li>requests: request html and parse</li>\n<li>re: regular expression for string manipulation</li>\n<li>pandas: convert data scraped into csv files</li>\n</ul>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup </span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br></pre></td></tr></table></figure>\n<h4 id=\"Helper-Function-to-Parse-One-Anime-Row\"><a href=\"#Helper-Function-to-Parse-One-Anime-Row\" class=\"headerlink\" title=\"Helper Function to Parse One Anime Row\"></a>Helper Function to Parse One Anime Row</h4><p><img src=\"!--swig￼12--&gt;/images/MALscrape/static.png\" alt=\"\"></p>\n<p>Looking at the html of <a href=\"https://myanimelist.net/topanime.php\">https://myanimelist.net/topanime.php</a> (using chrome, right click and select inspect, navigate to the element section, and you will see the HTML), each anime is a tr (table row) of the table. Within each row, name of anime is wrapped in class anime_ranking_h3, related information in class information, and score in class score. These can be scraped with beautifulsoup rather simply using the select() function. Then the text can be cleaned.</p>\n<p>We can further get a show’s start year and end year from the related information section. Here I used regular expression to get 4 digits of year to match start and end years.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getOneRow</span>(<span class=\"params\">targetrow</span>):</span><br><span class=\"line\">    animeTitle=targetrow.select(<span class=\"string\">&quot;h3.anime_ranking_h3&quot;</span>)[<span class=\"number\">0</span>].text</span><br><span class=\"line\">    animeInformation=targetrow.select(<span class=\"string\">&quot;div.information&quot;</span>)[<span class=\"number\">0</span>].text.replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;|&quot;</span>).replace(<span class=\"string\">&quot;  &quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    animeScore=targetrow.select(<span class=\"string\">&quot;td.score&quot;</span>)[<span class=\"number\">0</span>].text.replace(<span class=\"string\">&quot;\\n&quot;</span>, <span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># split by |</span></span><br><span class=\"line\">    year=animeInformation.split(<span class=\"string\">&quot;|&quot;</span>) </span><br><span class=\"line\">    <span class=\"comment\"># get all years in the second section from above</span></span><br><span class=\"line\">    years=re.findall(<span class=\"string\">&#x27;[0-9]+&#x27;</span>, year[<span class=\"number\">2</span>])</span><br><span class=\"line\">    start=<span class=\"string\">&quot;NA&quot;</span></span><br><span class=\"line\">    end=<span class=\"string\">&quot;NA&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(year)&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        start=years[<span class=\"number\">0</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(years)&gt;<span class=\"number\">1</span>:</span><br><span class=\"line\">            end=years[<span class=\"number\">1</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animeTitle, animeInformation,animeScore, start, end</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tablerow[0]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Function-to-Get-a-Specified-Number-of-Anime-on-The-Top-Anime-List\"><a href=\"#Function-to-Get-a-Specified-Number-of-Anime-on-The-Top-Anime-List\" class=\"headerlink\" title=\"Function to Get a Specified Number of Anime on The Top Anime List\"></a>Function to Get a Specified Number of Anime on The Top Anime List</h4><p>Pass in the url into requests.get() function to get the entire page, then make a soup out of it with BeautifulSoup. With the soup ready, we could find the table corresponding to the top anime list and find all its rows. For each row, get desired data with the getOneRow() helper function. Because each page of the top anime list only has 50 animes, if requesting more than 50 anime, make sure to get a loop to scrape pages after the first one.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getTopAnime</span>(<span class=\"params\">limit</span>):</span><br><span class=\"line\">    <span class=\"comment\"># I find using a dict to store data is the easiest, and it&#x27;s easy to convert to JSON or csv</span></span><br><span class=\"line\">    topanimedict=[] </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#url</span></span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://myanimelist.net/topanime.php&quot;</span> </span><br><span class=\"line\">    <span class=\"comment\">#make soup of html</span></span><br><span class=\"line\">    soup = BeautifulSoup(requests.get(url).text, <span class=\"string\">&#x27;lxml&#x27;</span>) </span><br><span class=\"line\">    <span class=\"comment\">#get table corresponding to the top anime table.</span></span><br><span class=\"line\">    toptable = soup.select(<span class=\"string\">&quot;table&quot;</span>)[<span class=\"number\">0</span>] </span><br><span class=\"line\">    <span class=\"comment\">#get all rows in the table</span></span><br><span class=\"line\">    tablerow=toptable.select(<span class=\"string\">&quot;tr.ranking-list&quot;</span>) </span><br><span class=\"line\">     <span class=\"comment\">#get data for each row</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> tablerow:</span><br><span class=\"line\">        anime, info, score, st, ed=getOneRow(row)</span><br><span class=\"line\">        tempdict=&#123;<span class=\"string\">&quot;anime&quot;</span>: anime,<span class=\"string\">&quot;start&quot;</span>: st, <span class=\"string\">&quot;end&quot;</span>:ed,  <span class=\"string\">&quot;score&quot;</span>: score, <span class=\"string\">&quot;information&quot;</span>: info&#125;</span><br><span class=\"line\">        topanimedict.append(tempdict)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\"># get page 2, 3, 4 etc after the first one</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> limit&gt;<span class=\"number\">50</span>: </span><br><span class=\"line\">        ind=limit//<span class=\"number\">50</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span> (<span class=\"number\">1</span>,ind):</span><br><span class=\"line\">            url = <span class=\"string\">&quot;https://myanimelist.net/topanime.php?limit=&quot;</span>+<span class=\"built_in\">str</span>(<span class=\"number\">50</span>*i)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(url)</span><br><span class=\"line\">            soup = BeautifulSoup(requests.get(url).text, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">            toptable = soup.select(<span class=\"string\">&quot;table&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            tablerow=toptable.select(<span class=\"string\">&quot;tr.ranking-list&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> tablerow:</span><br><span class=\"line\">                anime, info, score, st, ed=getOneRow(row)</span><br><span class=\"line\">                tempdict=&#123;<span class=\"string\">&quot;anime&quot;</span>: anime,<span class=\"string\">&quot;start&quot;</span>: st, <span class=\"string\">&quot;end&quot;</span>:ed,  <span class=\"string\">&quot;score&quot;</span>: score, <span class=\"string\">&quot;information&quot;</span>: info&#125;</span><br><span class=\"line\">                topanimedict.append(tempdict)</span><br><span class=\"line\">    </span><br><span class=\"line\">    topanimedf=pd.DataFrame.from_dict(topanimedict)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> topanimedf</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Convert-Data\"><a href=\"#Convert-Data\" class=\"headerlink\" title=\"Convert Data\"></a>Convert Data</h4><p>With the help of a dictionary and the pandas library, it is really easy to convert what we scraped into a csv. This script will save the data to the same directory where the script is stored.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df=getTopAnime(<span class=\"number\">3000</span>)</span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;MALtop3000.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>https://myanimelist.net/topanime.php?limit=50\nhttps://myanimelist.net/topanime.php?limit=100\nhttps://myanimelist.net/topanime.php?limit=150\nhttps://myanimelist.net/topanime.php?limit=200\nhttps://myanimelist.net/topanime.php?limit=250\nhttps://myanimelist.net/topanime.php?limit=300\nhttps://myanimelist.net/topanime.php?limit=350\nhttps://myanimelist.net/topanime.php?limit=400\nhttps://myanimelist.net/topanime.php?limit=450\nhttps://myanimelist.net/topanime.php?limit=500\nhttps://myanimelist.net/topanime.php?limit=550\nhttps://myanimelist.net/topanime.php?limit=600\nhttps://myanimelist.net/topanime.php?limit=650\nhttps://myanimelist.net/topanime.php?limit=700\nhttps://myanimelist.net/topanime.php?limit=750\nhttps://myanimelist.net/topanime.php?limit=800\nhttps://myanimelist.net/topanime.php?limit=850\nhttps://myanimelist.net/topanime.php?limit=900\nhttps://myanimelist.net/topanime.php?limit=950\nhttps://myanimelist.net/topanime.php?limit=1000\nhttps://myanimelist.net/topanime.php?limit=1050\nhttps://myanimelist.net/topanime.php?limit=1100\nhttps://myanimelist.net/topanime.php?limit=1150\nhttps://myanimelist.net/topanime.php?limit=1200\nhttps://myanimelist.net/topanime.php?limit=1250\nhttps://myanimelist.net/topanime.php?limit=1300\nhttps://myanimelist.net/topanime.php?limit=1350\nhttps://myanimelist.net/topanime.php?limit=1400\nhttps://myanimelist.net/topanime.php?limit=1450\nhttps://myanimelist.net/topanime.php?limit=1500\nhttps://myanimelist.net/topanime.php?limit=1550\nhttps://myanimelist.net/topanime.php?limit=1600\nhttps://myanimelist.net/topanime.php?limit=1650\nhttps://myanimelist.net/topanime.php?limit=1700\nhttps://myanimelist.net/topanime.php?limit=1750\nhttps://myanimelist.net/topanime.php?limit=1800\nhttps://myanimelist.net/topanime.php?limit=1850\nhttps://myanimelist.net/topanime.php?limit=1900\nhttps://myanimelist.net/topanime.php?limit=1950\nhttps://myanimelist.net/topanime.php?limit=2000\nhttps://myanimelist.net/topanime.php?limit=2050\nhttps://myanimelist.net/topanime.php?limit=2100\nhttps://myanimelist.net/topanime.php?limit=2150\nhttps://myanimelist.net/topanime.php?limit=2200\nhttps://myanimelist.net/topanime.php?limit=2250\nhttps://myanimelist.net/topanime.php?limit=2300\nhttps://myanimelist.net/topanime.php?limit=2350\nhttps://myanimelist.net/topanime.php?limit=2400\nhttps://myanimelist.net/topanime.php?limit=2450\nhttps://myanimelist.net/topanime.php?limit=2500\nhttps://myanimelist.net/topanime.php?limit=2550\nhttps://myanimelist.net/topanime.php?limit=2600\nhttps://myanimelist.net/topanime.php?limit=2650\nhttps://myanimelist.net/topanime.php?limit=2700\nhttps://myanimelist.net/topanime.php?limit=2750\nhttps://myanimelist.net/topanime.php?limit=2800\nhttps://myanimelist.net/topanime.php?limit=2850\nhttps://myanimelist.net/topanime.php?limit=2900\nhttps://myanimelist.net/topanime.php?limit=2950\n</code></pre><p>Take a look at the scrape data file. Looked pretty neat to me. Index is the ranking-1.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df.tail()</span><br></pre></td></tr></table></figure>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>anime</th>\n      <th>end</th>\n      <th>information</th>\n      <th>score</th>\n      <th>start</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2995</th>\n      <td>Sekirei</td>\n      <td>2008</td>\n      <td>|TV (12 eps)|Jul 2008 - Sep 2008|320,922 members|</td>\n      <td>7.14</td>\n      <td>2008</td>\n    </tr>\n    <tr>\n      <th>2996</th>\n      <td>Shin Atashin'chi</td>\n      <td>2016</td>\n      <td>|TV (26 eps)|Oct 2015 - Apr 2016|2,427 members|</td>\n      <td>7.14</td>\n      <td>2015</td>\n    </tr>\n    <tr>\n      <th>2997</th>\n      <td>Tantei Opera Milky Holmes Movie: Gyakushuu no ...</td>\n      <td>2016</td>\n      <td>|Movie (1 eps)|Feb 2016 - Feb 2016|3,417 members|</td>\n      <td>7.14</td>\n      <td>2016</td>\n    </tr>\n    <tr>\n      <th>2998</th>\n      <td>Tenchi Muyou! Manatsu no Eve</td>\n      <td>1997</td>\n      <td>|Movie (1 eps)|Aug 1997 - Aug 1997|13,514 memb...</td>\n      <td>7.14</td>\n      <td>1997</td>\n    </tr>\n    <tr>\n      <th>2999</th>\n      <td>Tengen Toppa Gurren Lagann: Parallel Works</td>\n      <td>2008</td>\n      <td>|Music (8 eps)|Jun 2008 - Sep 2008|29,743 memb...</td>\n      <td>7.14</td>\n      <td>2008</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"Scraping-Dynamic-HTML-Using-MAL-user-list-as-An-Example\"><a href=\"#Scraping-Dynamic-HTML-Using-MAL-user-list-as-An-Example\" class=\"headerlink\" title=\"Scraping Dynamic HTML: Using MAL user list as An Example\"></a>Scraping Dynamic HTML: Using MAL user list as An Example</h3><p>with the code here, you will be able to scrape any user’s MAL. Here I used my own anime list as an example (<a href=\"https://myanimelist.net/animelist/iasnobmatsu\">https://myanimelist.net/animelist/iasnobmatsu</a>, FYI I highly highly recommend Attack on Titan, Haikyu, and Hoseki no Kuni).</p>\n<p>Dynamic HTML is different from static HTML as the static HTML is rendered from HTML source file (imaging writing an html file and that is what we scrape). Dynamic HTML, on the other side, is not rendered from HTML source files but from JavaScript (Or JQuery or React, whatever framework). Dynamic HTML, unlike static, is not generate the moment a url is opened, but will need some time to render after the document is ready.</p>\n<h4 id=\"Helper-Function-to-Get-One-Row-of-MAL-User-List\"><a href=\"#Helper-Function-to-Get-One-Row-of-MAL-User-List\" class=\"headerlink\" title=\"Helper Function to Get One Row of MAL User List\"></a>Helper Function to Get One Row of MAL User List</h4><p><img src=\"!--swig￼13--&gt;/images/MALscrape/dynamic.png\" alt=\"\"></p>\n<p>Similar to the getOneRow function(), this function parses specific data for one anime. This step is the same regardless of static or dynamic HTML.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getOneRowMAL</span>(<span class=\"params\">targetrow</span>):</span><br><span class=\"line\">    animeTitle=targetrow.select(<span class=\"string\">&quot;td.title&quot;</span>)[<span class=\"number\">0</span>].select(<span class=\"string\">&quot;a.link.sort&quot;</span>)[<span class=\"number\">0</span>].text</span><br><span class=\"line\">    animeType=targetrow.select(<span class=\"string\">&quot;td.type&quot;</span>)[<span class=\"number\">0</span>].text.strip()</span><br><span class=\"line\">    animeScore=targetrow.select(<span class=\"string\">&quot;td.score&quot;</span>)[<span class=\"number\">0</span>].text.strip()</span><br><span class=\"line\">    animeProgress=targetrow.select(<span class=\"string\">&quot;td.progress&quot;</span>)[<span class=\"number\">0</span>].text.replace(<span class=\"string\">&quot;\\n&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;  &quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animeTitle, animeType,animeScore, animeProgress</span><br><span class=\"line\"></span><br><span class=\"line\">getOneRowMAL(rows[<span class=\"number\">27</span>])</span><br></pre></td></tr></table></figure>\n<pre><code>(&#39;Haikyuu!!&#39;, &#39;TV&#39;, &#39;7&#39;, &#39; 25 &#39;)\n</code></pre><h4 id=\"Additional-Libraries-for-Dynamic-HTML\"><a href=\"#Additional-Libraries-for-Dynamic-HTML\" class=\"headerlink\" title=\"Additional Libraries for Dynamic HTML\"></a>Additional Libraries for Dynamic HTML</h4><p>For scraping dynamic HTML, we need selenium and time. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br></pre></td></tr></table></figure>\n<h4 id=\"Get-Dynamic-MAL-User-List-Data\"><a href=\"#Get-Dynamic-MAL-User-List-Data\" class=\"headerlink\" title=\"Get Dynamic MAL User List Data\"></a>Get Dynamic MAL User List Data</h4><p>to scrape dynamic data, we need the url of the webpage. We also need to have a web browser driver. Here I use the Chrome driver (download here <a href=\"https://chromedriver.chromium.org/\">https://chromedriver.chromium.org/</a> or through homebrew etc). I stored it in my download folder, and I will need the path to the driver. I used Mac and Chrome driver in this case. </p>\n<p>With the url of webpage and path to browser driver ready, we will use selenium to declare a driver variable, and use it instead of requests to get the url.</p>\n<p>Then it is important to delay the rest of the function by some time, here I used .2 but it may differ depend on how fast a page loads on a specific device under specific internet conditions. This time allows dynamic HTML to render so we scrape the desired content instead of the intial script used to generate the HTML (which we cannot parse).<br>Then similar steps to scrape each row of data from the user anime list using BeautifulSoup.</p>\n<p>When using selenium with webdriver to scrap data, the browser may pop open with the url. You should not close the window until the data is scraped. If the window is closedbefore beautifulsoup get the change to read code on the driver, it will not work.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getMAL</span>(<span class=\"params\">url, driverPath</span>):</span><br><span class=\"line\">    MALdict=[]</span><br><span class=\"line\">    <span class=\"comment\"># use selenium to simulate driver</span></span><br><span class=\"line\">    driver = webdriver.Chrome(driverPath)</span><br><span class=\"line\">    driver.get(url) <span class=\"comment\"># get page</span></span><br><span class=\"line\"></span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.2</span>) <span class=\"comment\"># may need to change</span></span><br><span class=\"line\">    <span class=\"comment\"># similar to static, get soup and parse</span></span><br><span class=\"line\">    soup=BeautifulSoup(driver.page_source, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">    toptable = soup.select(<span class=\"string\">&quot;table&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">    rows=toptable.select(<span class=\"string\">&quot;tbody.list-item&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> rows:</span><br><span class=\"line\">        ti,ty,sc,pr=getOneRowMAL(row)</span><br><span class=\"line\">        MALdict.append(&#123;<span class=\"string\">&quot;anime&quot;</span>:ti,<span class=\"string\">&quot;type&quot;</span>:ty, <span class=\"string\">&quot;score&quot;</span>:sc,<span class=\"string\">&quot;progress&quot;</span>:pr&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pd.DataFrame.from_dict(MALdict)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Convert-Data-1\"><a href=\"#Convert-Data-1\" class=\"headerlink\" title=\"Convert Data\"></a>Convert Data</h4><p>Here we use the function above to get dynamic HTML data from my MAL list (you can replace with any user’s MAL list. The data is saved again to a CSV file.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url=<span class=\"string\">&#x27;https://myanimelist.net/animelist/iasnobmatsu&#x27;</span></span><br><span class=\"line\">driverp=<span class=\"string\">&quot;/Users/ziqianxu/Downloads/chromedriver&quot;</span></span><br><span class=\"line\">df2=getMAL(url,driverp)</span><br><span class=\"line\">df2.to_csv(<span class=\"string\">&#x27;iasnobmatsuMAL.csv&#x27;</span>, index=<span class=\"literal\">False</span>)</span><br><span class=\"line\">df2.head()</span><br></pre></td></tr></table></figure>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>anime</th>\n      <th>progress</th>\n      <th>score</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>JoJo no Kimyou na Bouken Part 3: Stardust Crus...</td>\n      <td>- / 24</td>\n      <td>8</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>One Piece</td>\n      <td>- / -</td>\n      <td>8</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Shingeki no Kyojin: The Final Season</td>\n      <td>- / 16</td>\n      <td>10</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Akagami no Shirayuki-hime</td>\n      <td>12</td>\n      <td>5</td>\n      <td>TV</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Bleach</td>\n      <td>366</td>\n      <td>7</td>\n      <td>TV</td>\n    </tr>\n  </tbody>\n</table>\n</div>"}],"PostAsset":[{"_id":"source/_posts/002-seam/seam-carving-demonstration-video.gif","post":"cla36n5vf00038kvgbwyt6afw","slug":"seam-carving-demonstration-video.gif","modified":1,"renderable":1},{"_id":"source/_posts/002-seam/set1_carved6.jpg","post":"cla36n5vf00038kvgbwyt6afw","slug":"set1_carved6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/002-seam/set1_carved8.jpg","post":"cla36n5vf00038kvgbwyt6afw","slug":"set1_carved8.jpg","modified":1,"renderable":1},{"_id":"source/_posts/002-seam/set1_original.jpg","post":"cla36n5vf00038kvgbwyt6afw","slug":"set1_original.jpg","modified":1,"renderable":1},{"_id":"source/_posts/002-seam/set4_carved3.jpg","post":"cla36n5vf00038kvgbwyt6afw","slug":"set4_carved3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/002-seam/set4_carved7.jpg","post":"cla36n5vf00038kvgbwyt6afw","slug":"set4_carved7.jpg","modified":1,"renderable":1},{"_id":"source/_posts/002-seam/set4_original.jpg","post":"cla36n5vf00038kvgbwyt6afw","slug":"set4_original.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cla36n5vd00018kvgdwhtf2g2","category_id":"cla36n5vg00058kvg42ph2b87","_id":"cla36n5vh000a8kvg8bccf0r2"},{"post_id":"cla36n5vf00038kvgbwyt6afw","category_id":"cla36n5vh00078kvg65sn6tei","_id":"cla36n5vi000e8kvgcj1jc4hi"},{"post_id":"cla36n5vf00048kvg529bfnv3","category_id":"cla36n5vh00078kvg65sn6tei","_id":"cla36n5vi000g8kvggcwpdnkt"}],"PostTag":[{"post_id":"cla36n5vf00038kvgbwyt6afw","tag_id":"cla36n5vg00068kvg8n762agx","_id":"cla36n5vi000c8kvg6b0d9qoa"},{"post_id":"cla36n5vf00038kvgbwyt6afw","tag_id":"cla36n5vh00088kvgg22h58ne","_id":"cla36n5vi000d8kvgdsvndo2g"},{"post_id":"cla36n5vf00048kvg529bfnv3","tag_id":"cla36n5vh000b8kvg5vm8c8q3","_id":"cla36n5vi000h8kvgbqdhgbjq"},{"post_id":"cla36n5vf00048kvg529bfnv3","tag_id":"cla36n5vi000f8kvgdgty8j2g","_id":"cla36n5vi000i8kvg9gqg2iuf"}],"Tag":[{"name":"computational photography","_id":"cla36n5vg00068kvg8n762agx"},{"name":"matlab","_id":"cla36n5vh00088kvgg22h58ne"},{"name":"python","_id":"cla36n5vh000b8kvg5vm8c8q3"},{"name":"web scraping","_id":"cla36n5vi000f8kvgdgty8j2g"}]}}